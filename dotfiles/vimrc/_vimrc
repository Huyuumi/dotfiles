" release autogroup in MyAutoCmd
augroup MyAutoCmd
	autocmd!
augroup END

"文字コード
set encoding=utf-8

"----------------------------------------
"       検索関連
"----------------------------------------

set ignorecase	"大文字小文字を区別しない
set smartcase	"検索文字に大文字があれば大文字小文字を区別
set incsearch	"インクリメンタルサーチ
set hlsearch	"検索一致をハイライト表示

"----------------------------------------
"       編集関連
"----------------------------------------
set shiftround		"'shiftwidth'の倍数に丸める
set infercase		"補完時に大文字小文字を区別しない
set virtualedit=all	"文字のないとこにでもカーソル移動を可能にする
set hidden
set switchbuf=useopen
set showmatch		"対応する括弧をハイライト表示
set matchtime=3		"showmatchを３秒にする

set matchpairs& matchpairs+=<:>	"対応括弧に'<','>'のペアを追加
set backspace=indent,eol,start	"バックスペースで何でも消せるようにする

"クリップボードをデフォルトのレジスタとして指定
if has('unnamedplus')
	set clipboard& clipboard+=unnamedplus,unnamed
else
	set clipboard& clipboard+=unnamed
endif

"スワップファイル、バックアップファイルなどをつくらない
set nowritebackup
set nobackup
set noswapfile

"---------------------------------------
"　　　表示関連
"---------------------------------------
set list	"不可視文字の可視化
set number	"行番号の表示
set wrap	"テキストの折り返し
set textwidth=0	"自動的に会合が入るのを無効化
set colorcolumn=80	"そのかわりに80文字目にラインを入れる

"スクリーンベルの無効化
set t_vb=
set novisualbell

set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲

"---------------------------------------
"　　　マクロとキー設定
"---------------------------------------

"jjでESCとみなす
inoremap jj <Esc>

"ESCを２回でハイライトを消す
nmap <silent> <Esc><Esc> :nohlsearch<CR>

"j,kの移動を折り返された行でも自然に振る舞うようにする
nnoremap j gj
nnoremap k gk

"vを二回で行末まで選択
vnoremap v $h

"TABで対応ペアにジャンプ
nnoremap <Tab> %
vnoremap<Tab> %

"Ctrl + hjklでウィンドウを移動
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"Shift + 矢印でウィンドウサイズを変更
nnoremap <S-Left>  <C-w><<CR>
nnoremap <S-Right> <C-w>><CR>
nnoremap <S-Up>    <C-w>-<CR>
nnoremap <S-Down>  <C-w>+<CR>

"QuickFixおよびHelpでは q でバッファを閉じる
autocmd MyAutoCmd FileType help,qf nnoremap <buffer> q <C-w>c

"--------------------------------------
"    コンパイルキーマップ関連
"--------------------------------------

":GCCでコンパイルする

command! GCC call s:GCC()
map! gcc :GCC<CR>
function! s:GCC()
        :w
        :!gcc % -o %.out
        :!./%.out
endfunction

":pyでコンパイルする
command! Python call s:Python()
map py :Python<CR>
function! s:Python()
        :w
        :!python %
endfunction

"カラースキーム
colorscheme molokai

"----------------------------------------
"     各種プラグイン設定
"----------------------------------------

"----------------------------------------
"     NeoBundle
"----------------------------------------
let s:noplugin = 0
let s:bundle_root = expand('~/.vim/bundle')
let s:neobundle_root = s:bundle_root . '/neobundle.vim'
if !isdirectory(s:neobundle_root) || v:version < 702
	" NeoBundleが存在しない、もしくはVimのバージョンが古い場合はプラグインを一切読み込まない
         let s:noplugin = 1
else
	"Bundleを'runtimepath'に追加し初期化を行う
	if has('vim_starting')
		execute "set runtimepath+=" . s:neobundle_root
	endif
	call neobundle#rc(s:bundle_root)

	" NeoBundle自身をNeoBundleで管理させる
	NeoBundleFetch 'Shougo/neobundle.vim'
	" 非同期通信を可能にする
	" 'build'が指定されているのでインストール時に自動的に
	" 指定されたコマンドが実行され vimproc がコンパイルされる
"	NeoBundle "Shougo/vimproc", {
"		\ "build": {
"		\   "windows"   : "make -f make_mingw32.mak",
"		\   "cygwin"    : "make -f make_cygwin.mak",
"		\   "mac"       : "make -f make_mac.mak",
"		\   "unix"      : "make -f make_unix.mak",
"		\ }}

		" originalrepos on github
		NeoBundle 'Shougo/neobundle.vim'
		NeoBundle 'Shougo/vimproc'
		NeoBundle 'VimClojure'
		NeoBundle 'Shougo/vimshell'
		NeoBundle 'Shougo/unite.vim'
		NeoBundle 'Shougo/neocomplcache'
		NeoBundle 'Shougo/neosnippet'
		NeoBundle 'Shougo/neosnippet-snippets'
		NeoBundle 'jpalardy/vim-slime'
		NeoBundle 'scrooloose/syntastic'
"---------------------------------------
"　　追加プラグイン(Neobundle)
"---------------------------------------

		"カラースキーム
		NeoBundle 'nanotech/jellybeans.vim'
		"入力補完プラグイン
		NeoBundle 'YankRing.vim'
		NeoBundle 'tpope/vim-surround'
		"Python入力補完
		NeoBundle 'davidhalter/jedi-vim'

"--------------------------------------
	NeoBundleCheck
endif
filetype plugin indent on
syntax on

"----------------------------------------
"    NeoComplcache
"----------------------------------------

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
        \ }

        " Plugin key-mappings.
        inoremap <expr><C-g>     neocomplcache#undo_completion()
        inoremap <expr><C-l>     neocomplcache#complete_common_string()

        " Recommended key-mappings.
        " <CR>: close popup and save indent.
        inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
        function! s:my_cr_function()
          return neocomplcache#smart_close_popup() . "\<CR>"
          endfunction
          " <TAB>: completion.
          inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
          " <C-h>, <BS>: close popup and delete backword char.
          inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
          inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
          inoremap <expr><C-y>  neocomplcache#close_popup()
          inoremap <expr><C-e>  neocomplcache#cancel_popup()
